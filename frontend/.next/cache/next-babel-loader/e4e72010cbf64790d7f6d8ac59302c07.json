{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nfunction GraphQLUrl() {\n  // If window is not defined, it is fetch from the server\n  if (false) {\n    return 'http://localhost:5000/';\n  }\n\n  return 'http://localhost:5000/';\n}\n\nfunction client(_ref) {\n  var headers = _ref.headers,\n      initialState = _ref.initialState;\n  console.log(headers);\n  return new ApolloClient({\n    request: function request(operation) {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include'\n        },\n        headers: headers\n      });\n    },\n    uri: GraphQLUrl(),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default withApollo(client);","map":{"version":3,"sources":["/frontend/lib/withApollo.js"],"names":["withApollo","ApolloClient","InMemoryCache","GraphQLUrl","client","headers","initialState","console","log","request","operation","setContext","fetchOptions","credentials","uri","cache","restore"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,IAAuBC,aAAvB,QAA4C,cAA5C;;AAEA,SAASC,UAAT,GAAsB;AACpB;AACA,aAAmC;AACjC,WAAO,wBAAP;AACD;;AACD,SAAO,wBAAP;AACD;;AAED,SAASC,MAAT,OAA2C;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,SAAO,IAAIJ,YAAJ,CAAiB;AACtBQ,IAAAA,OAAO,EAAE,iBAAAC,SAAS,EAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBR,QAAAA,OAAO,EAAPA;AAJmB,OAArB;AAMD,KARqB;AAStBS,IAAAA,GAAG,EAAEX,UAAU,EATO;AAUtBY,IAAAA,KAAK,EAAE,IAAIb,aAAJ,GAAoBc,OAApB,CAA4BV,YAAY,IAAI,EAA5C;AAVe,GAAjB,CAAP;AAYD;;AACD,eAAeN,UAAU,CAACI,MAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nfunction GraphQLUrl() {\n  // If window is not defined, it is fetch from the server\n  if (typeof window === 'undefined') {\n    return 'http://localhost:5000/';\n  }\n  return 'http://localhost:5000/';\n}\n\nfunction client({ headers, initialState }) {\n  console.log(headers);\n  return new ApolloClient({\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include'\n        },\n        headers\n      });\n    },\n    uri: GraphQLUrl(),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\nexport default withApollo(client);\n"]},"metadata":{},"sourceType":"module"}