{"ast":null,"code":"var _jsxFileName = \"/frontend/pages/components/Books.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/**\n *  Books component\n *\n *\n */\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Book from './Book';\nimport { useQuery } from '@apollo/react-hooks';\nconst BooksStyles = styled.article`\n  header h1 {\n    font-size: var(--global-font);\n  }\n`;\nexport const GET_BOOK_QUERY = gql`\n  query QUERY_BOOKS {\n    books {\n      book_id\n      title\n      description\n      type\n      created\n      author {\n        author_id\n        name\n        email\n      }\n    }\n  }\n`;\n\nfunction Books() {\n  let {\n    loading,\n    data,\n    error\n  } = useQuery(GET_BOOK_QUERY);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"loading...\");\n  if (error) throw Error(error);\n  return __jsx(BooksStyles, {\n    className: \"books\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"article-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Books\"), data.books.map(book => {\n    return __jsx(Book, {\n      key: book.book_id,\n      data: book,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }));\n}\n\nexport default Books;","map":{"version":3,"sources":["/frontend/pages/components/Books.js"],"names":["gql","styled","Book","useQuery","BooksStyles","article","GET_BOOK_QUERY","Books","loading","data","error","Error","books","map","book","book_id"],"mappings":";;;;AAAA;;;;;AAMA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,MAAMC,WAAW,GAAGH,MAAM,CAACI,OAAQ;;;;CAAnC;AAMA,OAAO,MAAMC,cAAc,GAAGN,GAAI;;;;;;;;;;;;;;;CAA3B;;AAiBP,SAASO,KAAT,GAAiB;AACf,MAAI;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2BP,QAAQ,CAACG,cAAD,CAAvC;AAEA,MAAIE,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIE,KAAJ,EAAW,MAAMC,KAAK,CAACD,KAAD,CAAX;AAEX,SACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEGD,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAAI;AACtB,WAAO,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,OAAhB;AAAyB,MAAA,IAAI,EAAED,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CAFH,CADF;AAQD;;AAED,eAAeP,KAAf","sourcesContent":["/**\n *  Books component\n *\n *\n */\n\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Book from './Book';\n\nimport { useQuery } from '@apollo/react-hooks';\n\nconst BooksStyles = styled.article`\n  header h1 {\n    font-size: var(--global-font);\n  }\n`;\n\nexport const GET_BOOK_QUERY = gql`\n  query QUERY_BOOKS {\n    books {\n      book_id\n      title\n      description\n      type\n      created\n      author {\n        author_id\n        name\n        email\n      }\n    }\n  }\n`;\n\nfunction Books() {\n  let { loading, data, error } = useQuery(GET_BOOK_QUERY);\n\n  if (loading) return <p>loading...</p>;\n  if (error) throw Error(error);\n\n  return (\n    <BooksStyles className='books'>\n      <h1 className='article-header'>Books</h1>\n      {data.books.map(book => {\n        return <Book key={book.book_id} data={book} />;\n      })}\n    </BooksStyles>\n  );\n}\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}